name: Build AmpProfiler Plugin (Cross-Platform)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    env:
      SOURCE_DIR: AmpProfiler/plugin     # folder containing CMakeLists.txt
      BUILD_DIR: build
      ORT_VERSION: 1.17.0                # change if you need a different version

    steps:
      - name: Check out repo (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.27.7'

      - name: Install dependencies (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config curl tar unzip

      # --- Download ONNX Runtime and set ONNXRUNTIME_ROOT ---
      - name: Get ONNX Runtime (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          set -e
          cd "$RUNNER_TEMP"
          curl -L -o ort.tgz "https://github.com/microsoft/onnxruntime/releases/download/v${ORT_VERSION}/onnxruntime-linux-x64-${ORT_VERSION}.tgz"
          mkdir -p ort && tar -xzf ort.tgz -C ort --strip-components=1
          echo "ONNXRUNTIME_ROOT=$RUNNER_TEMP/ort" >> $GITHUB_ENV

      - name: Get ONNX Runtime (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -e
          cd "$RUNNER_TEMP"
          curl -L -o ort.zip "https://github.com/microsoft/onnxruntime/releases/download/v${ORT_VERSION}/onnxruntime-osx-universal2-${ORT_VERSION}.zip"
          unzip -q ort.zip -d ort
          # unzip creates a directory; move to flat "ort"
          mv ort/onnxruntime-osx-universal2-${ORT_VERSION}/* ort/ || true
          echo "ONNXRUNTIME_ROOT=$RUNNER_TEMP/ort" >> $GITHUB_ENV

      - name: Get ONNX Runtime (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $tmp = $env:RUNNER_TEMP
          $ver = "${{ env.ORT_VERSION }}"
          $url = "https://github.com/microsoft/onnxruntime/releases/download/v$ver/onnxruntime-win-x64-$ver.zip"
          Invoke-WebRequest $url -OutFile "$tmp\ort.zip"
          Expand-Archive -Path "$tmp\ort.zip" -DestinationPath "$tmp\ort" -Force
          # Expand-Archive creates subfolder; flatten to ...\ort
          $sub = Get-ChildItem "$tmp\ort" | Where-Object { $_.PSIsContainer } | Select-Object -First 1
          if ($sub) { Copy-Item "$($sub.FullName)\*" "$tmp\ort" -Recurse -Force }
          Add-Content $env:GITHUB_ENV "ONNXRUNTIME_ROOT=$tmp\ort"

      - name: Verify CMakeLists exists
        shell: bash
        run: |
          echo "SOURCE_DIR=$SOURCE_DIR"
          test -f "$SOURCE_DIR/CMakeLists.txt" || { 
            echo "::error file=$SOURCE_DIR::CMakeLists.txt not found. Check SOURCE_DIR."; 
            exit 1; 
          }

      - name: Configure CMake
        shell: bash
        run: |
          mkdir -p "$BUILD_DIR"
          cd "$BUILD_DIR"
          cmake "../$SOURCE_DIR" -DCMAKE_BUILD_TYPE=Release -DONNXRUNTIME_ROOT="${ONNXRUNTIME_ROOT}"

      - name: Build plugin
        shell: bash
        run: |
          cd "$BUILD_DIR"
          cmake --build . --config Release

      - name: Package plugin (.zip)
        shell: bash
        run: |
          set -e
          mkdir -p packages
          shopt -s globstar nullglob
          vst3_found=""
          for f in "$BUILD_DIR"/**/*.vst3; do
            vst3_found="$f"; break
          done
          if [ -z "$vst3_found" ]; then
            echo "::error::No .vst3 produced under $BUILD_DIR/**.vst3"
            ls -R "$BUILD_DIR" || true
            exit 1
          fi
          echo "Found VST3: $vst3_found"
          cp -R "$vst3_found" "packages/AmpProfiler-${{ matrix.os }}.vst3"
          (cd packages && zip -r "AmpProfiler-${{ matrix.os }}.zip" "AmpProfiler-${{ matrix.os }}.vst3")

      - name: Upload artifact (zip)
        uses: actions/upload-artifact@v4
        with:
          name: AmpProfiler-${{ matrix.os }}
          path: packages/AmpProfiler-${{ matrix.os }}.zip
          if-no-files-found: error
